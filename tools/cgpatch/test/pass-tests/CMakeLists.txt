include(AddLLVM)
function(
  configure_lit_site_cfg
  input
  output
)
  set(LIT_SITE_CFG_IN_HEADER "## Autogenerated from ${input}\n## Do not edit!")
  configure_file(
    ${input}
    ${output}
    @ONLY
  )
endfunction()

function(
  find_llvm_progs
  target
  names
)
  cmake_parse_arguments(
    ARG
    "ABORT_IF_MISSING;SHOW_VAR"
    "DEFAULT_EXE"
    "HINTS"
    ${ARGN}
  )
  set(TARGET_TMP ${target})

  find_program(
    ${target}
    NAMES ${names}
    PATHS ${LLVM_TOOLS_BINARY_DIR}
    NO_DEFAULT_PATH
  )
  if(NOT ${target})
    find_program(
      ${target}
      NAMES ${names}
      HINTS ${ARG_HINTS}
    )
  endif()

  if(NOT ${target})
    set(target_missing_message "")
    if(ARG_DEFAULT_EXE)
      unset(${target} CACHE)
      set(${target}
          ${ARG_DEFAULT_EXE}
          CACHE STRING "Default value for ${TARGET_TMP}."
      )
      set(target_missing_message "Using default: ${ARG_DEFAULT_EXE}")
    endif()

    set(message_status STATUS)
    if(ARG_ABORT_IF_MISSING AND NOT ARG_DEFAULT_EXE)
      set(message_status SEND_ERROR)
    endif()
    message(
      ${message_status}
      "Did not find LLVM program "
      "${names}"
      " in ${LLVM_TOOLS_BINARY_DIR}, in system path or hints "
      "\"${ARG_HINTS}\""
      ". "
      ${target_missing_message}
    )
  endif()

  if(ARG_SHOW_VAR)
    mark_as_advanced(CLEAR ${target})
  else()
    mark_as_advanced(${target})
  endif()
endfunction()

find_llvm_progs(
  FILECHECK_EXE
  "FileCheck-${LLVM_VERSION_MAJOR};FileCheck"
  HINTS
  /usr/lib/llvm-${LLVM_VERSION_MAJOR}/bin
  /usr/lib/llvm-${LLVM_VERSION_MAJOR}
  /usr/lib/llvm
  /usr/bin
  /usr/local/bin
  /opt/local/bin
  ABORT_IF_MISSING
)

find_llvm_progs(
  SPLIT_FILE_EXE
  "split-file-${LLVM_VERSION_MAJOR};split-file"
  HINTS
  /usr/lib/llvm-${LLVM_VERSION_MAJOR}/bin
  /usr/lib/llvm-${LLVM_VERSION_MAJOR}
  /usr/lib/llvm
  /usr/bin
  /usr/local/bin
  /opt/local/bin
  ABORT_IF_MISSING
)

if(LLVM_EXTERNAL_LIT)
  cmake_path(
    GET
    LLVM_EXTERNAL_LIT
    PARENT_PATH
    LLVM_EXTERNAL_LIT_DIR
  )
endif()

find_llvm_progs(
  LIT_EXE
  "llvm-lit;lit;llvm-lit.py;lit.py"
  HINTS
  ${LLVM_EXTERNAL_LIT_DIR}
  /usr/lib/llvm-${LLVM_VERSION_MAJOR}
  /usr/lib/llvm
  /usr/bin
  /usr/local/bin
  /opt/local/bin
  ABORT_IF_MISSING
)

set(CGPATCHCXX_EXE "${CMAKE_BINARY_DIR}/tools/cgpatch/wrapper/patchcxx")
set(TEST_CPP_ARGS "-O0")
configure_lit_site_cfg(${CMAKE_CURRENT_SOURCE_DIR}/lit.site.cfg.in ${CMAKE_CURRENT_BINARY_DIR}/lit_O0.site.cfg)

set(TEST_CPP_ARGS "-O0 -flto=thin -fwhole-program-vtables")
configure_lit_site_cfg(${CMAKE_CURRENT_SOURCE_DIR}/lit.site.cfg.in ${CMAKE_CURRENT_BINARY_DIR}/lit_O0_lto.site.cfg)

set(TEST_CPP_ARGS "-O2")
configure_lit_site_cfg(${CMAKE_CURRENT_SOURCE_DIR}/lit.site.cfg.in ${CMAKE_CURRENT_BINARY_DIR}/lit_O2.site.cfg)

set(TEST_CPP_ARGS "-O2 -flto=thin -fwhole-program-vtables")
configure_lit_site_cfg(${CMAKE_CURRENT_SOURCE_DIR}/lit.site.cfg.in ${CMAKE_CURRENT_BINARY_DIR}/lit_O2_lto.site.cfg)

add_lit_testsuite(
  pass-tests
  "Running pass tests (unoptimized)"
  ${CMAKE_CURRENT_SOURCE_DIR}
  ARGS
  -v
  -j
  1
  PARAMS
  site_config=${CMAKE_CURRENT_BINARY_DIR}/lit_O0.site.cfg
  DEPENDS
  cgpatch-inst-pass
)

add_lit_testsuite(
  pass-tests-lto
  "Running pass tests (unoptimized with -fwhole-program-vtables)"
  ${CMAKE_CURRENT_SOURCE_DIR}
  ARGS
  -v
  -j
  1
  PARAMS
  site_config=${CMAKE_CURRENT_BINARY_DIR}/lit_O0_lto.site.cfg
  DEPENDS
  cgpatch-inst-pass
)

add_lit_testsuite(
  pass-tests-optimized
  "Running pass tests (optimized with -O2)"
  ${CMAKE_CURRENT_SOURCE_DIR}
  ARGS
  -v
  -j
  1
  PARAMS
  site_config=${CMAKE_CURRENT_BINARY_DIR}/lit_O2.site.cfg
  DEPENDS
  cgpatch-inst-pass
)

add_lit_testsuite(
  pass-tests-optimized-lto
  "Running pass tests (optimized with -O2 and -fwhole-program-vtables)"
  ${CMAKE_CURRENT_SOURCE_DIR}
  ARGS
  -v
  -j
  1
  PARAMS
  site_config=${CMAKE_CURRENT_BINARY_DIR}/lit_O2_lto.site.cfg
  DEPENDS
  cgpatch-inst-pass
)
