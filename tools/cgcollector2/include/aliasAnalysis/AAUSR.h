/**
 * File: AAUSR.h
 * License: Part of the MetaCG project. Licensed under BSD 3 clause license. See LICENSE.txt file at
 * https://github.com/tudasc/metacg/LICENSE.txt
 */

#include "AliasAnalysis.h"
#include <clang/AST/Expr.h>

void generateUSRForCallOrConstructExpr(const clang::Expr* CE, const clang::ASTContext* Context,
                                       clang::SmallVectorImpl<char>& Buf, clang::FunctionDecl* ParentFunctionDecl);
StringType generateUSRForCallOrConstructExpr(const clang::Expr* CE, const clang::ASTContext* Context,
                                             clang::FunctionDecl* ParentFunctionDecl);
StringType generateUSRForDecl(const clang::Decl* DE);
StringType generateUSRForUnnamedParamVarDecl(const clang::ParmVarDecl* VD);
StringType generateUSRForUnnamedUnion(const clang::FieldDecl* FD);
StringType generateUSRForUnnamedField(const clang::FieldDecl* FD);
/**
 *  Generates a USR for a 'this' pointer
 * @param ParentFunctionDecl The function containing the 'this' pointer
 * @return
 */
StringType generateUSRForThisExpr(clang::FunctionDecl* ParentFunctionDecl);

/**
 * Generates a USR for a 'this' pointer
 * @param ParentFunctionUSR The USR of the function containing the 'this' pointer
 * @return
 */
StringType generateUSRForThisExpr(StringType ParentFunctionUSR);

/**
 * TODO typeid
 * Generates a USR for an 'typeid' expression. This currently always returns the same USR
 * @return
 */
// StringType generateUSRForTypeidExpr(const clang::CXXTypeidExpr *);

/**
 * Generates a USR for the object generated by a 'new' expression
 * @param NE
 * @param ParentFunctionDecl The function containing the new expression
 * @return
 */
StringType generateUSRForNewExpr(clang::CXXNewExpr* NE, clang::FunctionDecl* ParentFunctionDecl);

/**
 * Generates a USR for the object generated by materializing a temporary expression. This can for example be a lambda
 * @param MTE
 * @param ParentFunctionDecl The function containing the temporary expression
 * @return
 */
StringType generateUSRForMaterializeTemporaryExpr(clang::MaterializeTemporaryExpr* MTE,
                                                  clang::FunctionDecl* ParentFunctionDecl);

/**
 * Generates an USR for the symbolic return used to merge virtual functions
 * @param ParentFunctionDecl
 * @return
 */
StringType generateUSRForSymbolicReturn(clang::FunctionDecl* ParentFunctionDecl);
