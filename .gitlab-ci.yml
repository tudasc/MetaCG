# File: .gitlab-ci.yml
# License: Part of the MetaCG proect. Licensed under BSD 3 clause license. See LICENSE.txt file at https://github.com/jplehr/pira/LICENSE.txt
# Description: File to configure our Gitlab CI
include: .ci-defaults-template.yml

# Stages
stages:
  - download
  - lint
  - build-deps
  - configure-test
  - build
  - test
  - integration-test
  - install

.job-setup: &job-setup
  parallel:
    matrix:
      - GCC: 11
        LLVM: [13.0.1, 14.0.6, 15.0.7, 16.0.6, 17.0.6, 18.1.8]
  variables:
    MCG_BUILD: build-GCC-$GCC-LLVM-$LLVM


# State: Download
mcg-download:
  stage: download
  variables:
    GIT_STRATEGY: clone
    GIT_CLONE_PATH: $CI_BUILDS_DIR/$CI_PIPELINE_ID
  script:
    - echo 'Done.'


# Stage: lint
mcg-cmake-lint:
  stage: lint
  needs: ["mcg-download"]
  script:
    - for f in $(find {cgcollector,graph,pgis} -name "CMakeLists.txt"); do cmake-format --check $f || exit 1; done ; cmake-format --check CMakeLists.txt
    - for f in $(find ./cmake -type f); do cmake-format --check $f || exit 1; done


# Stage: build-deps
build-dependencies:
  stage: build-deps
  needs: ["mcg-download"]
  script:
    - ./build_submodules.sh

# Stage: configure-test
configure-custom-md:
  stage: configure-test
  needs: ["mcg-download"]
  script:
    - test -d graph/include/metadata/custom || exit 1
    - echo "// Empty test header" > graph/include/metadata/custom/TestHeader.h
    - cmake -S . -B build-configure-md -G Ninja -DCMAKE_BUILD_TYPE=Debug
      -DMETACG_BUILD_PGIS=OFF
      -DMETACG_BUILD_CGCOLLECTOR=OFF
      -DCMAKE_VERBOSE_MAKEFILE:BOOL=ON
      -DMETACG_BUILD_UNIT_TESTS=OFF
    - grep "TestHeader.h" "build-configure-md/graph/include/metadata/CustomMD.h" || exit 1
    - rm -f graph/include/metadata/custom/TestHeader.h

# Stage: build
build-mcg-no-tests:
  <<: *job-setup
  stage: build
  needs: ["build-dependencies", "configure-custom-md"]
  script:
    - module load clang/$LLVM
    - cmake -S . -B $MCG_BUILD-no-tests -G Ninja -DCMAKE_BUILD_TYPE=Debug 
        -DCMAKE_INSTALL_PREFIX=/tmp/metacg/$MCG_BUILD-no-tests
        -DCUBE_DIR=$(dirname $(which cube_info))/..
        -DEXTRAP_INCLUDE=./extern/install/extrap/include 
        -DEXTRAP_LIB=./extern/install/extrap/lib 
        -DCMAKE_VERBOSE_MAKEFILE:BOOL=ON
        -DMETACG_BUILD_UNIT_TESTS=OFF
    - cmake --build $MCG_BUILD-no-tests --parallel
    - module purge

build-mcg-stripped-all:
  <<: *job-setup
  stage: build
  needs: ["build-dependencies", "configure-custom-md"]
  script:
    - module load clang/$LLVM
    - cmake -S . -B $MCG_BUILD-no-all -G Ninja -DCMAKE_BUILD_TYPE=Debug 
        -DCMAKE_INSTALL_PREFIX=/tmp/metacg/$MCG_BUILD-dflt
        -DCUBE_DIR=$(dirname $(which cube_info))/..
        -DEXTRAP_INCLUDE=./extern/install/extrap/include 
        -DEXTRAP_LIB=./extern/install/extrap/lib 
        -DCMAKE_VERBOSE_MAKEFILE:BOOL=ON
    - cmake --build $MCG_BUILD-no-all --parallel
    - module purge

build-mcg-stripped-pgis:
  <<: *job-setup
  stage: build
  needs: ["build-dependencies", "configure-custom-md"]
  script:
    - module load clang/$LLVM
    - cmake -S . -B $MCG_BUILD-no-cgcollector -G Ninja -DCMAKE_BUILD_TYPE=Debug
      -DCMAKE_INSTALL_PREFIX=/tmp/metacg/$MCG_BUILD-w_pgis
      -DCUBE_DIR=$(dirname $(which cube_info))/..
      -DEXTRAP_INCLUDE=./extern/install/extrap/include
      -DEXTRAP_LIB=./extern/install/extrap/lib
      -DMETACG_BUILD_PGIS=ON
      -DCMAKE_VERBOSE_MAKEFILE:BOOL=ON
    - cmake --build $MCG_BUILD-no-cgcollector --parallel
    - module purge

build-mcg-stripped-cgcollector:
  <<: *job-setup
  stage: build
  needs: ["build-dependencies", "configure-custom-md"]
  script:
    - module load clang/$LLVM
    - cmake -S . -B $MCG_BUILD-no-pgis -G Ninja -DCMAKE_BUILD_TYPE=Debug
      -DCMAKE_INSTALL_PREFIX=/tmp/metacg/$MCG_BUILD-w_cgcollector
      -DCUBE_DIR=$(dirname $(which cube_info))/..
      -DEXTRAP_INCLUDE=./extern/install/extrap/include
      -DEXTRAP_LIB=./extern/install/extrap/lib
      -DMETACG_BUILD_CGCOLLECTOR=ON
      -DCMAKE_VERBOSE_MAKEFILE:BOOL=ON
    - cmake --build $MCG_BUILD-no-pgis --parallel
    - module purge

build-mcg:
  <<: *job-setup
  stage: build
  needs: ["build-dependencies", "configure-custom-md"]
  script:
    - module load clang/$LLVM
    - source .venv/bin/activate
    - cmake -S . -B $MCG_BUILD -G Ninja -DCMAKE_BUILD_TYPE=Debug
      -DCMAKE_INSTALL_PREFIX=/tmp/metacg/$MCG_BUILD-w_all
      -DLLVM_EXTERNAL_LIT=$(which lit)
      -DCUBE_DIR=$(dirname $(which cube_info))/..
      -DEXTRAP_INCLUDE=./extern/install/extrap/include
      -DEXTRAP_LIB=./extern/install/extrap/lib
      -DMETACG_BUILD_PGIS=ON
      -DMETACG_BUILD_CGCOLLECTOR=ON
      -DMETACG_BUILD_CGPATCH=ON
      -DMETACG_BUILD_PYMETACG=ON
      -DMETACG_BUILD_PYMETACG_TESTS=ON
      -DCMAKE_VERBOSE_MAKEFILE:BOOL=ON
    - cmake --build $MCG_BUILD --parallel
    - module purge


# Stage: test
test-cgc:
  <<: *job-setup
  stage: test
  needs: ["build-mcg"]
  script:
    - module load clang/$LLVM
    - cd cgcollector/test
    - mkdir -p log
    - bash run_format_one_test.sh -b $MCG_BUILD
    - bash run_format_two_test.sh -b $MCG_BUILD
    #- bash run_aa_test.sh -b $MCG_BUILD

test-graphlib:
  <<: *job-setup
  stage: test
  needs: ["build-mcg"]
  script:
    - module load clang/$LLVM
    - cd $MCG_BUILD/graph/test/unit && ./libtests --gtest_output=xml:gcc-$GCC-llvm-$LLVM.xml
    - GCCv=$GCC && LLVMv=$LLVM && sed -i -e "s/Test\"/Test-gcc-$GCCv-llvm-$LLVMv\"/g" gcc-$GCC-llvm-$LLVM.xml
  artifacts:
    when: always
    paths:
      - $MCG_BUILD/graph/test/unit/gcc-$GCC-llvm-$LLVM.xml
    reports:
      junit: $MCG_BUILD/graph/test/unit/gcc-$GCC-llvm-$LLVM.xml

test-pgis:
  <<: *job-setup
  stage: test
  needs: ["build-mcg"]
  script:
    - module load clang/$LLVM
    - cd $MCG_BUILD/pgis/test/unit && ./pgistests --gtest_output=xml:gcc-$GCC-llvm-$LLVM.xml
    - GCCv=$GCC && LLVMv=$LLVM && sed -i -e "s/Test\"/Test-gcc-$GCCv-llvm-$LLVMv\"/g" gcc-$GCC-llvm-$LLVM.xml
  artifacts:
    when: always
    paths:
      - $MCG_BUILD/pgis/test/unit/gcc-$GCC-llvm-$LLVM.xml
    reports:
      junit: $MCG_BUILD/pgis/test/unit/gcc-$GCC-llvm-$LLVM.xml

test-pymetacg:
  <<: *job-setup
  stage: test
  needs: ["build-mcg"]
  script:
    - cd $MCG_BUILD/pymetacg/tests
    - ctest . --verbose

test-cgpatch-lit:
  <<: *job-setup
  stage: test
  needs: ["build-mcg"]
  parallel:
    matrix:
      - GCC: 11
        LLVM: ["15.0.7", "16.0.6", "17.0.6", "18.1.8"]
  script:
    - module load clang/$LLVM
    - cmake --install $MCG_BUILD
    - cmake --build $MCG_BUILD --target pass-tests
    - cmake --build $MCG_BUILD --target pass-tests-lto
    - cmake --build $MCG_BUILD --target pass-tests-optimized
    - cmake --build $MCG_BUILD --target pass-tests-optimized-lto

# Stage: integration-test
test-graphlib-merge:
  <<: *job-setup
  stage: integration-test
  needs: ["build-mcg"]
  script:
    - module load clang/$LLVM
    - cd graph/test/integration/CallgraphMerge
    - ./MergeTestRunner.sh -b $MCG_BUILD

test-cgvalidate:
  <<: *job-setup
  stage: integration-test
  needs: ["build-mcg"]
  script:
    - module load clang/$LLVM
    - cd cgcollector/test/integration
    - ./runner.sh $MCG_BUILD

test-basic-pgis:
  <<: *job-setup
  stage: integration-test
  needs: ["build-mcg"]
  script:
    - module load clang/$LLVM
    - cd pgis
    - export LD_LIBRARY_PATH=$PWD/../extern/install/extrap/lib:$LD_LIBRARY_PATH
    - cd test/integration
    - ./basicTestRunner.sh -b $MCG_BUILD

test-static-pgis:
  <<: *job-setup
  stage: integration-test
  needs: ["build-mcg"]
  script:
    - module load clang/$LLVM
    - cd pgis
    - export LD_LIBRARY_PATH=$PWD/../extern/install/extrap/lib:$LD_LIBRARY_PATH
    - cd test/integration
    - ./selectionTestRunner.sh -t static -b $MCG_BUILD

test-modeling-pgis:
  <<: *job-setup
  stage: integration-test
  needs: ["build-mcg"]
  script:
    - module load clang/$LLVM
    - cd pgis
    - export LD_LIBRARY_PATH=$PWD/../extern/install/extrap/lib:$LD_LIBRARY_PATH
    - cd test/integration
    - ./selectionTestRunner.sh -t modeling -b $MCG_BUILD

test-dynamic-pgis:
  <<: *job-setup
  stage: integration-test
  needs: ["build-mcg"]
  script:
    - module load clang/$LLVM
    - cd pgis
    - export LD_LIBRARY_PATH=$PWD/../extern/install/extrap/lib:$LD_LIBRARY_PATH
    - cd test/integration
    - ./selectionTestRunner.sh -t dynamic -b $MCG_BUILD

test-imbalance-pgis:
  <<: *job-setup
  stage: integration-test
  needs: ["build-mcg"]
  script:
    - module load clang/$LLVM
    - cd pgis
    - export LD_LIBRARY_PATH=$PWD/../extern/install/extrap/lib:$LD_LIBRARY_PATH
    - cd test/integration
    - ./selectionTestRunner.sh -t imbalance -b $MCG_BUILD

test-target-collector:
  <<: *job-setup
  stage: integration-test
  needs: ["build-mcg"]
  script:
    - module load clang/$LLVM
    - cd graph/test/integration/TargetCollector
    - ./TestRunner.sh -b $MCG_BUILD

# Stage: install
install-mcg:
  <<: *job-setup
  stage: install
  needs: ["build-mcg"]
  script:
    - cmake --install $MCG_BUILD-no-all
    - cd graph/test/install
    - stat /tmp/metacg/$MCG_BUILD-dflt/lib64/libmetacg.so
    - CMAKE_PREFIX_PATH=/tmp/metacg/$MCG_BUILD-dflt/lib64/cmake/metacg cmake -S . -B $MCG_BUILD-no-all/install-test -DCMAKE_INSTALL_PREFIX=/tmp/metacg-user/test
    - cmake --build $MCG_BUILD-no-all/install-test --parallel
    - rm -r /tmp/metacg/$MCG_BUILD-dflt

install-pgis:
  <<: *job-setup
  stage: install
  needs: ["build-mcg"]
  script:
    - module load clang/$LLVM
    - export LD_LIBRARY_PATH=$PWD/extern/install/extrap/lib:$LD_LIBRARY_PATH
    - cmake --install $MCG_BUILD-no-cgcollector
    - stat /tmp/metacg/$MCG_BUILD-w_pgis/bin/pgis_pira
    - export LD_LIBRARY_PATH=/tmp/metacg/$MCG_BUILD-w_pgis/lib64:/tmp/metacg/$MCG_BUILD-w_pgis/lib:$LD_LIBRARY_PATH
    - /tmp/metacg/$MCG_BUILD-w_pgis/bin/pgis_pira --help
    - rm -r /tmp/metacg/$MCG_BUILD-w_pgis

install-cgcollector:
  <<: *job-setup
  stage: install
  needs: ["build-mcg"]
  script:
    - module load clang/$LLVM
    - export LD_LIBRARY_PATH=$PWD/extern/install/extrap/lib:$LD_LIBRARY_PATH
    - cmake --install $MCG_BUILD-no-pgis
    - stat /tmp/metacg/$MCG_BUILD-w_cgcollector/bin/cgcollector
    - export LD_LIBRARY_PATH=/tmp/metacg/$MCG_BUILD-w_cgcollector/lib64:/tmp/metacg/$MCG_BUILD-w_cgcollector/lib:$LD_LIBRARY_PATH
    - /tmp/metacg/$MCG_BUILD-w_cgcollector/bin/cgcollector --help
    - rm -r /tmp/metacg/$MCG_BUILD-w_cgcollector